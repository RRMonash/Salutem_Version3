@model IEnumerable<Salutem_Version3.Models.Event>

@{
    ViewBag.Title = "UserIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*@Styles.Render("~/Content/StyleSheet1.css")*@

@*This is used for the Geocoding Mapbox API*@


<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.2.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet'
      href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.2.0/mapbox-gl-geocoder.css'
      type='text/css' />
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v3.1.3/mapbox-gl-directions.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v3.1.3/mapbox-gl-directions.css' type='text/css' />


<script src='https://unpkg.com/es6-promise@4.2.4/dist/es6-promise.auto.min.js'></script>
<script src="https://unpkg.com/@Html.Raw("@")mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>

@if (!User.IsInRole("Admin"))
{
    <div id='maps' style='width: 80%; height: 500px;'></div>
    <div>
        <input style="float: right" align-items:flex-end" type="submit" class="input.btn.btn-default" value="Enrol in Event" onclick="location.href='@Url.Action("Create", "Applicants")'" />
    </div>
    <script>
        var data = [];
        mapboxgl.accessToken = 'pk.eyJ1Ijoicm9oYW5yIiwiYSI6ImNqbDR3ZHVibzBiY20zd3FreXBpNXJ4dmEifQ.7RIsd0-Lhpg4ONWmYDA4DQ';
        // eslint-disable-next-line no-undef

        var mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });
        var map = new mapboxgl.Map({
            container: 'maps',
            style: 'mapbox://styles/mapbox/streets-v10',
            center: [145.031588, -37.889921],
            zoom: 11
        });

        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }));

        map.addControl(new MapboxDirections({
            accessToken: mapboxgl.accessToken
        }), 'top-left');

        map.on('mouseenter', 'places', function () {
            map.getCanvas().style.cursor = 'pointer';
        });
        // Change it back to a pointer when it leaves.
        map.on('mouseleave', 'places', function () {
            map.getCanvas().style.cursor = '';
        });

        map.addControl(new mapboxgl.NavigationControl());

        map.addControl(new MapboxGeocoder({
            accessToken: mapboxgl.accessToken
        }));
    </script>
}
@*<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.mapbox.com/mapbox.js/v3.1.1/mapbox.js'></script>
    <link href='https://api.mapbox.com/mapbox.js/v3.1.1/mapbox.css' rel='stylesheet' />

    <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/leaflet.markercluster.js'></script>
    <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.css' rel='stylesheet' />
    <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.Default.css' rel='stylesheet' />
    <script src="/mapbox.js/assets/data/realworld.388.js"></script>

    <div id='map'></div>

    <script>
        L.mapbox.accessToken = 'pk.eyJ1Ijoicm9oYW5yIiwiYSI6ImNqbDR3ZHVibzBiY20zd3FreXBpNXJ4dmEifQ.7RIsd0-Lhpg4ONWmYDA4DQ';
        var map = L.mapbox.map('map', 'mapbox.streets')
            .setView([-37.82, 175.215], 14);
    </script>*@

<h2>Event List</h2>

<div id='map'></div>

<table class="table">

    <tr>
        <th>
            @Html.DisplayNameFor(model => model.EventName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EventDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EventStartTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EventEndTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EventLocation)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.EventName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EventDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EventStartTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EventEndTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EventLocation)
                @*@if (User.Identity.IsAuthenticated && !User.IsInRole("Admin"))
                {*@
                    <script>
                        //var data = [];
                        map.on('click', function (e) {

                            mapboxClient.geocoding.forwardGeocode({
                                query: '@item.EventLocation',
                                autocomplete: false,
                                limit: 1
                            }).send().then(function (response) {
                                if (response && response.body && response.body.features && response.body.features.length) {
                                    var feature = response.body.features[0];
                                    //var el = document.createElement('div');
                                    //el.className = 'marker';
                                    new mapboxgl.Marker().setLngLat(feature.center).addTo(map);

                                    var popup = new mapboxgl.Popup({ offset: [0, -5] })
                                        .setLngLat(feature.center)
                                        .setHTML('<h6>' + '@item.EventName' + '</h6><p>' + '@item.EventLocation' + '</p>')
                                        .setLngLat(feature.geometry.coordinates)
                                        .addTo(map);

                                    @*var feature1 = {
                                        "type": "Feature",
                                        "properties": {
                                            "description": '@item.Description',
                                            "icon": "circle-15"
                                        },
                                        "geometry": {
                                            "type": "Point",
                                            "coordinates": feature.center
                                        }
                                    };
                                    data.push(feature1);
                                    map.addLayer({
                                        "id": "places",
                                        "type": "symbol",
                                        "source": {
                                            "type": "geojson",
                                            "data": {
                                                "type": "FeatureCollection",
                                                "features": feature
                                            }
                                        },
                                        "layout": {
                                            "icon-image": "{icon}",
                                            "icon-allow-overlap": true
                                        }
                                    });
                                        var features = map.queryRenderedFeatures(e.point, {
                                            layers: ['Feature'] // replace this with the name of the layer
                                        });

                                    if (!features.length) {
                                        return;
                                    }*@
                                }

                            });
                        });
                    </script>
                @*}*@
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.EventId })
            </td>
        </tr>
    }

</table>
@*<script>
                                map.addLayer({
                                    "id": "places",
                                    "type": "symbol",
                                    "source": {
                                        "type": "geojson",
                                        "data": {
                                            "type": "FeatureCollection",
                                            "features": data
                                        }
                                    },
                                    "layout": {
                                        "icon-image": "{icon}",
                                        "icon-allow-overlap": true
                                    }
                                 });
                                map.on('mouseenter', 'places', function () {
                                    map.getCanvas().style.cursor = 'pointer';
                                });
                                // Change it back to a pointer when it leaves.
                                map.on('mouseleave', 'places', function () {
                                    map.getCanvas().style.cursor = '';
                                });
    </script>*@
@*@section Scripts{
    <script>

                            map.on('load', function () {
                                // Add a layer showing the places.
                                map.addLayer({
                                    "id": "places",
                                    "type": "symbol",
                                    "source": {
                                        "type": "geojson",
                                        "data": {
                                            "type": "FeatureCollection",
                                            "features": data
                                        }
                                    },
                                    "layout": {
                                        "icon-image": "{icon}",
                                        "icon-allow-overlap": true
                                    }
                                });
                                var data = [];
                                for (i = 0; i < locations.length; i++) {
                                    var feature = {
                                        "type": "Feature",
                                        "properties": {
                                            "description": '#',
                                            "icon": "circle-15"
                                        },
                                        "geometry": {
                                            "type": "Point",
                                            "coordinates": [locations[i].longitude, locations[i].latitude]
                                        }
                                    };
                                    data.push(feature);
                                }
                            }
        map.on('mouseenter', 'places', function () {
            map.getCanvas().style.cursor = 'pointer';
        });
        // Change it back to a pointer when it leaves.
        map.on('mouseleave', 'places', function () {
            map.getCanvas().style.cursor = '';
                            });


    </script>

    }*@

